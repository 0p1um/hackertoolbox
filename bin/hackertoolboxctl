#!/usr/bin/python3
import argparse
import subprocess
import os
import shutil
import sys
import hackertoolbox


# check sudo and env
if os.getuid() != 0:
    print('Must be run as root')
    sys.exit(0)

MODULE_PATH = os.path.dirname(hackertoolbox.__file__)
toolbox_service_path ='/etc/systemd/system/hackertoolbox.service'
beatd_service_path = '/etc/systemd/system/hackertoolbox-beatd.service'
web_service_path = '/etc/systemd/system/hackertoolbox-web-interface.service'
datasets_path = '/usr/share/datasets/'
chromedriver_symlink_path = MODULE_PATH+'/bin/chromedriver'
django_db_path = MODULE_PATH+'/db.sqlite3'
working_directory_line = 'WorkingDirectory=%s\n' % MODULE_PATH
list_elements = {'redis-server':{'name':'redis-server', 'file name':'redis-server.service', 'path':'/lib/systemd/system/redis-server.service'},\
        'daemon':{'name':'daemon', 'file name':'hackertoolbox.service', 'path':'/etc/systemd/system/hackertoolbox.service'},\
        'scheduler':{'name':'scheduler', 'file name':'hackertoolbox-beatd.service', 'path':'/etc/systemd/system/hackertoolbox-beatd.service'},\
        'interface':{'name':'interface', 'file name':'hackertoolbox-web-interface.service', 'path':'/etc/systemd/system/hackertoolbox-web-interface.service'}}

def check_init():
    if not os.path.isfile('/etc/hackertoolbox/hackertoolbox.conf'):
        print('Please run init command at least once to setup the database in order to use hackertoolbox')
        sys.exit(0)
    if not os.path.isdir(datasets_path):
        print('Please run init command at least once to setup the database in order to use hackertoolbox')
        sys.exit(0)
    if not os.path.isfile(toolbox_service_path):
        print('Please run init command at least once to setup the database in order to use hackertoolbox')
        sys.exit(0)
    if not os.path.isfile(beatd_service_path):
        print('Please run init command at least once to setup the database in order to use hackertoolbox')
        sys.exit(0)
    if not os.path.isfile(web_service_path):
        print('Please run init command at least once to setup the database in order to use hackertoolbox')
        sys.exit(0)

def init_hacker_toolbox():
    print('Initialisation of the database ...')
    subprocess.Popen(['python3', 'manage.py', 'makemigrations'], cwd=MODULE_PATH).wait()
    subprocess.Popen(['python3', 'manage.py', 'migrate'], cwd=MODULE_PATH).wait()
    subprocess.Popen(['chmod', '644', django_db_path]).wait()
    subprocess.Popen(['chmod', '755', MODULE_PATH]).wait()
    subprocess.Popen(['chown','-R', 'daemon:daemon', MODULE_PATH]).wait()
    print('Setting symbolic link to chromedriver ...')
    chromedriver_path = shutil.which('chromedriver')
    if chromedriver_path is not None:
        subprocess.Popen(['ln', '-sfn', chromedriver_path, chromedriver_symlink_path]).wait()
        print('chromedriver found, symbolic link created')
    else:
        print('chromedriver not found, verify that chromedriver binary is on your PATH\nAdvanced crawler module wont work without chromedriver, \
                run "hackertoolbox init" again if you solved this issue')
    print('Setting services files ...')
    toolbox_service_original = open(toolbox_service_path, 'r').readlines()
    beatd_service_original = open(beatd_service_path, 'r').readlines()
    web_service_original = open(web_service_path, 'r').readlines()
    for service_model_file, service_path in [(toolbox_service_original, toolbox_service_path), \
                            (beatd_service_original, beatd_service_path), \
                            (web_service_original,web_service_path)]:
        with open(service_path, 'w') as file:
            for line in service_model_file:
                if 'WorkingDirectory=' in line:
                    line = working_directory_line
                file.write(line)
    subprocess.Popen(['systemctl', 'daemon-reload']).wait()
    print('Successfully configured services files:\n%s\n%s\n%s' % (toolbox_service_path, beatd_service_path, web_service_path))

def service_ctrl(cmd, elements):
    check_init()
    for element in elements:
        element = list_elements[element]
        try:
            subprocess.Popen(['systemctl', cmd, element['file name']]).wait()
            print('%s element: %s' % (cmd, element['name']))
        except:
            print('Failed to %s the element %s\nCheck the logs of the services for more information:\nsudo journalctl -n %s' % (cmd, element['name'], element['file name']))

def status(elements):
    for element in elements:
        element = list_elements[element]
        is_active = subprocess.Popen(['systemctl', 'is-active', element['file name']], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        is_active = is_active.stdout.read().decode('utf-8')
        if is_active == 'active\n':
            is_active = '\033[92m%s\033[0m' % is_active
        else:
            is_active = '\033[91m%s\033[0m' % is_active
        print('Element: %s\nService name: %s\nService file path: %s\nStatus: %s' % (element['name'], element['file name'], element['path'], is_active))

help_command="""Controls hackertoolbox program, chose an action to perform:
    init                initialize hackertoolbox program, create the database, create services files ... 
                        Running init is needed before to use hackertoolbox program
    enable              enable the elements of hackertoolbox, once enable they will start automaticaly at boot
    disable             disable the elements of hackertoolbox, once disable they wont start automaticaly at boot
    start               start the elements of hackertoolbox, once they run you can use the program
    stop                stop the elements of hackertoolbox
    status              show the status of the differents elements of hackertoolbox
    """

help_elements="""Choose elements of hackertoolbox to perform the command on, by default the command is performed on all elements
Hackertoolbox has 3 elements:
    daemon              the daemon that run in the background to launch the tasks you set in hackertoolbox
    scheduler           the scheduler that run in background and schedule the tasks to send to the daemon
    interface           the web interface you can access to create tasks, by default on 0.0.0.0:8000, 
                        be sure the interface is not accessible from internet before launching it
    redis-server        redis-server is used as a message broker, it is required to use hackertoolbox, you should have installed it independantly
"""

def choices_description(help_str):
    return help_str

parser = argparse.ArgumentParser(description='hackertoobox control script', formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('command', type=str, choices=['init', 'enable', 'disable', 'stop', 'start', 'status'], help=choices_description(help_command), metavar='command')
parser.add_argument('-e', '--elements', type=str, choices=['daemon', 'scheduler', 'interface', 'redis-server'], help=choices_description(help_elements), nargs='+', \
        default=['daemon', 'scheduler', 'interface', 'redis-server'], metavar='element1 element2 ...')
args = parser.parse_args()
elements = args.elements
cmd = args.command

if cmd == 'init':
    init_hacker_toolbox()
elif cmd == 'status':
    status(elements)
else:
    service_ctrl(cmd, elements)

